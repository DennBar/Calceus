@page "/product/{id:int}"
@inject IProductService ProductService
@inject IStoreService StoreService

<PageTitle>Detalle del producto</PageTitle>

<div class="container my-5">
    @if (isProcessing)
    {
        <div class="my-lg-5 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary"
             style="width: 3rem; height: 3rem;"
             role="status">
            </div>
        </div>
    }
    else
    {
        @if (errorMessage.Length > 0)
        {
            <div class="py-2">
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <strong>@errorMessage</strong>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="container-fluid">
                    <div class="wrapper row">
                        <div class="col-md-6">
                            <img src="@product.Images[0].Data" alt="@product.Name" />
                        </div>
                        <div class="details col-md-6">
                            <h3 class="product-name fw-bold">@product.Name</h3>
                            <p class="product-description">@product.Description</p>

                            <select class="form-select" @bind="currentSizeId">
                                @foreach (var store in StoreService.Stores)
                                {
                                    <option value="@store.SizeId">@store.SizeId</option>
                                }
                            </select>
                            @foreach (var storeData in GetSelectedStoreData())
                            {
                                <select class="form-select">
                                    @for (int i = 0; i < storeData.Stores.Count; i++)
                                    {
                                        <option value="@storeData.Stores[i].Id">@storeData.Stores[i].Color.Name</option>
                                    }
                                </select>
                            }
                            <div class="action">
                                <button class="btn btn-primary add-to-cart">Añadir al carro</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        }
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();

    bool isProcessing { get; set; } = false;
    string errorMessage { get; set; } = string.Empty;
    decimal currentSizeId { get; set; } = 0;

    protected override async Task OnParametersSetAsync()
    {
        isProcessing = true;

        Product _product = (await ProductService.GetProductById(Id)).Data;

        if (_product == null)
        {
            errorMessage = "Producto no encontrado";
            return;
        }
        else
        {
            product = _product;

            await StoreService.GetStoreByProductIdGroupBySize(Id);

            currentSizeId = StoreService.SizeId;
        }

        isProcessing = false;
    }

    private List<StoreResponse> GetSelectedStoreData()
    {
        var storeData = StoreService.Stores.Where(s => s.SizeId == currentSizeId).ToList();

        return storeData;
    }
}
