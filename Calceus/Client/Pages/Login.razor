@page "/login"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject IAuthService AuthService

<PageTitle>Inicia Sesión</PageTitle>

<div class="container">
    @if (isProcessing)
    {
        <div class="my-lg-5 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary"
             style="width: 3rem; height: 3rem;"
             role="status">
            </div>
        </div>
    }
    else
    {
        <h3 class="py-2">Inicia Sesión</h3>
        <EditForm Model="user" OnValidSubmit="LoginHandler">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="email">Correo Electrónico</label>
                <InputText id="email" @bind-Value="user.Email" class="form-control" />
                <ValidationMessage For="@(()=>user.Email)" />
            </div>
            <div class="mb-3">
                <label for="password">Contraseña</label>
                <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
                <ValidationMessage For="@(()=>user.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
        @if (errorMessage.Length > 0)
        {
            <div class="py-2">
                <div class="alert alert-dismissible text-danger">
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    <strong>@errorMessage</strong>
                </div>
            </div>
        }
    }
</div>

@code {
    private UserLogin user = new UserLogin();

    bool isProcessing { get; set; } = false;

    string errorMessage = string.Empty;

    private async Task LoginHandler()
    {
        isProcessing = true;

        var result = await AuthService.Login(user);

        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorageService.SetItemAsync("authToken", result.Data);

            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            isProcessing = false;

            NavigationManager.NavigateTo("");
        }
        else
        {
            errorMessage = result.Message;

            isProcessing = false;
        }
    }
}
