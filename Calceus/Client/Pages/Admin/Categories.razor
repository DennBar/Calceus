@page "/admin/categories"
@inject ICategoryService CategoryService
@attribute [Authorize(Roles = "admin")]
@implements IDisposable

<PageTitle>Categorías</PageTitle>

<div class="container">
    @if (isProcessing)
    {
        <div class="my-lg-5 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary"
             style="width: 3rem; height: 3rem;"
             role="status">
            </div>
        </div>
    }
    else
    {
        <h3 class="py-2"> Categorías</h3>

        <div class="row py-2 m-0 border fw-bold">
            <div class="col">Nombre</div>
            <div class="col">Url</div>
            <div class="col">Visible</div>
            <div class="col">Eliminado</div>
            <div class="col"></div>
        </div>

        @foreach (var category in CategoryService.AdminCategories)
        {
            @if (category.Editing)
            {
                <EditForm Model="editingCategory" OnSubmit="UpsertCategory">
                    <div class="row py-2 m-0 border">
                        <div class="col">
                            <InputText @bind-Value="editingCategory.Name" class="form-control"></InputText>
                        </div>
                        <div class="col">
                            <InputText @bind-Value="editingCategory.Url" class="form-control"></InputText>
                        </div>
                        <div class="col">
                            <InputCheckbox @bind-Value="editingCategory.Visible" style="transform:scale(1.5,1.5)" />
                        </div>
                        <div class="col">
                            <InputCheckbox @bind-Value="editingCategory.Deleted" style="transform:scale(1.5,1.5)" />
                        </div>
                        <div class="col">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-upload"></i>
                            </button>
                            <button class="btn btn-primary" @onclick="CancelEditing">
                                <i class="bi bi-x-circle-fill"></i>
                            </button>
                        </div>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="row py-2 m-0 border">
                    <div class="col">@category.Name</div>
                    <div class="col">@category.Url</div>
                    <div class="col">@(category.Visible ? "✔️" : "")</div>
                    <div class="col">@(category.Deleted ? "✔️" : "")</div>
                    <div class="col">
                        <button class="btn btn-primary" @onclick="(()=>EditCategory(category))">
                            <i class="bi bi-pencil-fill"></i>
                        </button>
                        <button class="btn btn-danger" @onclick="(()=>DeleteCategory(category.Id))">
                            <i class="bi bi-trash-fill"></i>
                        </button>
                    </div>
                </div>
            }
        }
        <button class="btn btn-primary my-4" @onclick="CreateNewCategory">
            <i class="bi bi-plus"></i> Nueva categoría
        </button>
    }
</div>

@code {
    Category editingCategory = null;

    bool isProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        await CategoryService.GetAdminCategories();
        CategoryService.OnChange += StateHasChanged;
        isProcessing = false;
    }

    public void Dispose()
    {
        CategoryService.OnChange -= StateHasChanged;
    }

    private void CreateNewCategory()
    {
        editingCategory = CategoryService.CreateNewCategory();
    }

    private void EditCategory(Category category)
    {
        category.Editing = true;
        editingCategory = category;
    }

    private async Task UpsertCategory()
    {
        if (editingCategory.IsNew)
        {
            await CategoryService.AddCategory(editingCategory);
        }
        else
        {
            await CategoryService.UpdateCategory(editingCategory);
            editingCategory = new Category();
        }
    }

    private async Task CancelEditing()
    {
        editingCategory = new Category();
        await CategoryService.GetAdminCategories();
    }

    private async Task DeleteCategory(int id)
    {
        await CategoryService.DeleteCategory(id);
    }
}
