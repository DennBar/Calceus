@page "/business/colors/{page:int}"
@inject NavigationManager NavigationManager
@inject IColorService ColorService
@attribute [Authorize(Roles = "business")]
@implements IDisposable

<PageTitle>Colors</PageTitle>

<div class="container">
    @if (isProcessing)
    {
        <div class="my-lg-5 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary"
             style="width: 3rem; height: 3rem;"
             role="status">
            </div>
        </div>
    }
    else
    {
        <h3 class="pt-2">Colores</h3>

        <button class="btn btn-primary mb-4" @onclick="AddColor">
            <i class="bi bi-plus"></i> Nuevo color
        </button>

        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th scope="col">Nombre</th>
                    <th scope="col">Código</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var color in ColorService.AllMyColors)
                {
                    <tr scope="row">
                        <td>@color.Name</td>
                        <td>@color.Code</td>
                        <td>
                            <button class="btn btn-primary" @onclick="(()=>EditColor(color.Id))">
                                <i class="bi bi-pencil-fill"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    [Parameter]
    public int Page { get; set; } = 1;

    bool isProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        await ColorService.GetAllMyColors(Page);
        ColorService.ColorChanged += StateHasChanged;
        isProcessing = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        await ColorService.GetAllMyColors(Page);
    }

    public void Dispose()
    {
        ColorService.ColorChanged -= StateHasChanged;
    }

    protected void AddColor()
    {
        NavigationManager.NavigateTo("business/color");
    }

    protected void EditColor(int colorId)
    {
        NavigationManager.NavigateTo($"business/color/{colorId}");
    }
}
