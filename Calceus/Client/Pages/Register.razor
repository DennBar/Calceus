@page "/register"
@inject IRoleService RoleService
@inject IAuthService AuthService

<PageTitle>Regístrate</PageTitle>

<div class="container">
    @if (isProcessing)
    {
        <div class="my-lg-5 d-flex align-items-center justify-content-center vh-100">
            <div class="spinner-border text-primary"
             style="width: 3rem; height: 3rem;"
             role="status">
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center align-items-center mt-5">
            <div class="bg-white p-5 rounded-5 text-secondary shadow">
                <div class="d-flex justify-content-center">
                    <img src="/images/shoemaker.jpg" style="height: 7rem" />
                </div>
                <div class="text-center fs-1 fw-bold">Calceus</div>
                <EditForm Model="user" OnValidSubmit="RegisterHandler">
                    <DataAnnotationsValidator />
                    <div class="input-group mt-4">
                        <div class="input-group mt-3">
                            <span class="input-group-text bg-primary"><i class="bi bi-envelope-fill" style="color:#fff"></i></span>
                            <InputText id="email" placeholder="Correo electrónico" @bind-Value="user.Email" class="form-control" />
                        </div>
                        <ValidationMessage For="@(()=>user.Email)" />

                        <div class="input-group mt-3">
                            <span class="input-group-text bg-primary"><i class="bi bi-lock-fill" style="color:#fff"></i></span>
                            <InputText id="password" placeholder="Contraseña" @bind-Value="user.Password" class="form-control" type="password" />
                        </div>
                        <ValidationMessage For="@(()=>user.Password)" />

                        <div class="input-group mt-3">
                            <span class="input-group-text bg-primary"><i class="bi bi-lock-fill" style="color:#fff"></i></span>
                            <InputText id="confirmPassword" placeholder="Confirmar contraseña" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
                        </div>
                        <ValidationMessage For="@(()=>user.ConfirmPassword)" />

                        <div class="input-group mt-3">
                            <span class="input-group-text bg-primary"><i class="bi bi-person-fill" style="color:#fff"></i></span>
                            <InputSelect id="role" @bind-Value="user.RoleId" class="form-select">
                                <option value="0" selected disabled>Selecciona un Rol</option>
                                @foreach (var role in RoleService.Roles)
                                {
                                    <option value="@role.Id">@role.Description</option>
                                }
                            </InputSelect>
                        </div>
                        <ValidationMessage For="@(()=>user.RoleId)" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100 mt-4 fw-semibold shadow-sm">Regístrate</button>
                </EditForm>
                <div class="d-flex gap-1 justify-content-center mt-4">
                    <div>¿Ya tienes una cuenta?</div>
                    <a href="login" class="text-decoration-none text-info fw-semibold">Inicia sesión</a>
                </div>
                @if (message.Length > 0)
                {
                    <div class="py-2">
                        <div class="alert alert-dismissible @messageCssClass">
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            <strong>@message</strong>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    UserRegister user = new UserRegister();

    bool isProcessing { get; set; } = false;

    string message = string.Empty;
    string messageCssClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;

        await RoleService.GetRoles();

        isProcessing = false;
    }

    async Task RegisterHandler()
    {
        isProcessing = true;

        var result = await AuthService.Register(user);

        message = result.Message;

        if (result.Success)
        {
            messageCssClass = "alert-success";
            isProcessing = false;
        }
        else
        {
            messageCssClass = "alert-danger";
            isProcessing = false;
        }
    }
}
